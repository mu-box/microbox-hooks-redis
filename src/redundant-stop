#!/usr/bin/env ruby

# hookit is installed as a bundled app, so we need bundler to load it for us
$:.unshift  '/opt/gomicro/hookit/vendor/bundle'
require 'bundler/setup'

# load hookit/setup to bootstrap hookit and import the dsl
require 'hookit/setup'

if `sv status cache` =~ /^run/
  execute "/data/bin/redis-cli -p 6380 shutdown save"
end

service "flip" do
  action :disable
  init :runit
  only_if {`sv status flip` =~ /^run/}
  not_if { !Dir.exist?('/etc/service/flip') }
end

service "proxy" do
  action :disable
  init :runit
  only_if {`sv status proxy` =~ /^run/}
  not_if { !Dir.exist?('/etc/service/proxy') }
end

service "sentinel" do
  action :disable
  init :runit
  only_if {`sv status sentinel` =~ /^run/}
  not_if { !Dir.exist?('/etc/service/sentinel') }
end

service "cache" do
  action :disable
  init :runit
  only_if {`sv status cache` =~ /^run/}
  not_if { !Dir.exist?('/etc/service/cache') }
end

file '/etc/microinit.d/mroute' do
  action :delete
  only_if {::File.exist?('/etc/microinit.d/mroute')}
end

directory '/etc/service/flip' do
  action :delete
  not_if { !Dir.exist?('/etc/service/flip') }
end

directory '/etc/service/proxy' do
  action :delete
  not_if { !Dir.exist?('/etc/service/proxy') }
end

directory '/etc/service/sentinel' do
  action :delete
  not_if { !Dir.exist?('/etc/service/sentinel') }
end

directory '/etc/service/cache' do
  action :delete
  not_if { !Dir.exist?('/etc/service/cache') }
end
